#!/usr/bin/python
#
# generate localparam def for Lagrange polynomials

import sys

from giraffelib import util
from giraffelib.defs import Defs

module_def = """// synthesis VERILOG_INPUT_VERSION SYSTEMVERILOG_2012
// AUTOGENERATED - DO NOT EDIT
// This module was generated by gen_lagrange_sv.py

`ifndef __module_lagrange_coeffs_{0}
`include "simulator.v"
`include "field_arith_defs.v"
module lagrange_coeffs_{0}
   #( parameter npoints = {0} )
    ( output [`F_NBITS-1:0] coeffs [npoints-1:0] [npoints-1:0] );

"""

coeffs_generate = """
genvar Group, Elem;
generate
    for (Group = 0; Group < npoints; Group = Group + 1) begin: CoeffsGroup
        for (Elem = 0; Elem < npoints; Elem = Elem + 1) begin: CoeffsElem
            localparam offset = ((npoints * Group) + Elem) * `F_NBITS;
            assign coeffs[Group][Elem] = coeffs_param[offset+`F_NBITS-1:offset];
        end
    end
endgenerate
"""

endmodule_def = """
endmodule
`define __module_lagrange_coeffs_{0}
`endif // __module_lagrange_coeffs_{0}"""

def hex_repr(n):
    ret = hex(n).rstrip("L").lstrip("0x")
    ret = ret if ret is not "" else "0"
    return str(Defs.nbits) + "'h" + ret

def list_hex_repr(vals):
    ret = '{'
    first = True
    for v in reversed(vals):
        if first:
            first = False
        else:
            ret += ', '

        ret += hex_repr(v)

    ret += ' }'
    return ret

def coeffs_hex_repr(npoints):
    coeffs = util.generate_lagrange_coeffs(npoints - 1)

    ret = 'localparam [`F_NBITS*' + str(npoints) + '*' + str(npoints) + "-1:0] coeffs_param =\n  {  "
    first = True
    for cs in reversed(coeffs):
        if first:
            first = False
        else:
            ret += ',  '

        ret += list_hex_repr(cs)
        ret += '\n  '
    ret += '};\n'
    return ret

def lagrange_to_verilog(npoints):
    ret = module_def.format(npoints)
    ret += coeffs_hex_repr(npoints)
    ret += coeffs_generate
    ret += endmodule_def.format(npoints)

    return ret

def usage():
    print "Usage: %s <npoints> <prime>" % sys.argv[0]
    print "prime can be specified with an expression, e.g., '2**255 - 19'"
    sys.exit(1)

if __name__ == "__main__":
    if len(sys.argv) > 1:
        try:
            npts = int(sys.argv[1])
        except:
            usage()

    if len(sys.argv) > 2:
        try:
            util.set_prime(eval(sys.argv[2])) # pylint: disable=eval-used
        except:
            usage()

        print lagrange_to_verilog(npts)

    else:
        usage()
